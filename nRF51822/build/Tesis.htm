<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\Tesis.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\Tesis.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Wed Jan 11 16:04:51 2017
<BR><P>
<H3>Maximum Stack Usage =        704 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; $Super$$main &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1ad]">mbed_die</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[184]">mbed_assert_internal</a><BR>
 <LI><a href="#[183]">gpio_init_out</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[184]">mbed_assert_internal</a><BR>
 <LI><a href="#[1b2]">gpio_mode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b3]">pin_mode</a><BR>
 <LI><a href="#[1b0]">gpio_dir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[184]">mbed_assert_internal</a><BR>
 <LI><a href="#[c1]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c1]">__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</a><BR>
 <LI><a href="#[c0]">__asm___13_nRF51822n_cpp_ef81e865___Z12nrf_delay_usj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c0]">__asm___13_nRF51822n_cpp_ef81e865___Z12nrf_delay_usj</a><BR>
 <LI><a href="#[16]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">NMI_Handler</a><BR>
 <LI><a href="#[17]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">HardFault_Handler</a><BR>
 <LI><a href="#[18]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">SVC_Handler</a><BR>
 <LI><a href="#[19]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">PendSV_Handler</a><BR>
 <LI><a href="#[1a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">SysTick_Handler</a><BR>
 <LI><a href="#[21]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC_IRQHandler</a><BR>
 <LI><a href="#[105]">FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[105]">FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*)</a><BR>
 <LI><a href="#[106]">FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[106]">FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*)</a><BR>
 <LI><a href="#[107]">FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[107]">FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[4b]">&lang;Func1&rang;</a> from SerialBase.o(i.<Func1>) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[21]">ADC_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[29]">CCM_AAR_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[28]">ECB_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[20]">GPIOTE_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[17]">HardFault_Handler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[2d]">LPCOMP_COMP_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[16]">NMI_Handler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[1b]">POWER_CLOCK_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[2c]">QDEC_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[1c]">RADIO_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[27]">RNG_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[25]">RTC0_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[2b]">RTC1_IRQHandler</a> from app_timer.o(i.RTC1_IRQHandler) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[15]">Reset_Handler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[1e]">SPI0_TWI0_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[1f]">SPI1_TWI1_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[18]">SVC_Handler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[2e]">SWI0_IRQHandler</a> from app_timer.o(i.SWI0_IRQHandler) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[2f]">SWI1_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[30]">SWI2_IRQHandler</a> from softdevice_handler.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[31]">SWI3_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[32]">SWI4_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[33]">SWI5_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[1a]">SysTick_Handler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[3f]">SystemInit</a> from system_nrf51822.o(i.SystemInit) referenced from startup_nRF51822.o(.text)
 <LI><a href="#[26]">TEMP_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[22]">TIMER0_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[23]">TIMER1_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[24]">TIMER2_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[1d]">UART0_IRQHandler</a> from serial_api.o(i.UART0_IRQHandler) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[2a]">WDT_IRQHandler</a> from startup_nRF51822.o(.text) referenced from startup_nRF51822.o(RESET)
 <LI><a href="#[3c]">btle_handler(ble_evt_t*)</a> from btle.o(.text) referenced from btle.o(.text)
 <LI><a href="#[37]">dataSentCallback(unsigned)</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[34]">periodicCallback()</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3d]">sys_evt_dispatch(unsigned)</a> from btle.o(.text) referenced from btle.o(.text)
 <LI><a href="#[36]">dataWrittenCallback(const GattCharacteristicWriteCBParams*)</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4f]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[35]">disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[3e]">softdevice_assertion_handler(unsigned, unsigned short, const unsigned char*)</a> from softdevice_handler.o(.text) referenced from softdevice_handler.o(.text)
 <LI><a href="#[53]">UARTService::onDataWritten(const GattCharacteristicWriteCBParams*)</a> from main.o(i._ZN11UARTService13onDataWrittenEPK31GattCharacteristicWriteCBParams) referenced from main.o(.constdata)
 <LI><a href="#[55]">nRF51GattServer::addService(GattService&)</a> from nrf51gattserver.o(.text) referenced from nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
 <LI><a href="#[57]">nRF51GattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)</a> from nrf51gattserver.o(.text) referenced from nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
 <LI><a href="#[58]">nRF51GattServer::initializeGATTDatabase()</a> from nrf51gattserver.o(.text) referenced from nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
 <LI><a href="#[56]">nRF51GattServer::readValue(unsigned short, unsigned char*, unsigned short*)</a> from nrf51gattserver.o(.text) referenced from nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
 <LI><a href="#[3b]">nRF51GattServer::~nRF51GattServer()</a> from nrf51822n.o(i._ZN15nRF51GattServerD1Ev) referenced from btle.o(.text)
 <LI><a href="#[3b]">nRF51GattServer::~nRF51GattServer()</a> from nrf51822n.o(i._ZN15nRF51GattServerD1Ev) referenced from nrf51822n.o(i._ZN9nRF51822n13getGattServerEv)
 <LI><a href="#[5a]">GapAdvertisingData::~GapAdvertisingData__deallocating()</a> from gapadvertisingdata.o(.text) referenced from gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
 <LI><a href="#[59]">GapAdvertisingData::~GapAdvertisingData()</a> from gapadvertisingdata.o(.text) referenced from gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
 <LI><a href="#[5c]">GapAdvertisingParams::~GapAdvertisingParams__deallocating()</a> from gapadvertisingparams.o(.text) referenced from gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
 <LI><a href="#[5b]">GapAdvertisingParams::~GapAdvertisingParams()</a> from gapadvertisingparams.o(.text) referenced from gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
 <LI><a href="#[51]">void FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::membercaller&lang;UARTService&rang;(void*, char*, const GattCharacteristicWriteCBParams*)</a> from main.o(t._ZN26FunctionPointerWithContextIPK31GattCharacteristicWriteCBParamsE12membercallerI11UARTServiceEEvPvPcS2_) referenced from main.o(t._ZN38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE3addI11UARTServiceEEP26FunctionPointerWithContextIS2_EPT_MS9_FvS2_E)
 <LI><a href="#[5d]">CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()</a> from nrf51822n.o(t._ZN38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsED1Ev) referenced from nrf51822n.o(.constdata__ZTV38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE)
 <LI><a href="#[49]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[74]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[74]">mbed::FileHandle::flen()</a> from retarget.o(i._ZN4mbed10FileHandle4flenEv) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[75]">mbed::FileHandle::~FileHandle__sub_object()</a> from retarget.o(i._ZN4mbed10FileHandleD2Ev) referenced from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[4c]">mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</a> from SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq) referenced from SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
 <LI><a href="#[4d]">mbed::TimerEvent::irq(unsigned)</a> from TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj) referenced from TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
 <LI><a href="#[39]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[39]">mbed::Serial::~Serial()</a> from Serial.o(i._ZN4mbed6SerialD1Ev) referenced from main.o(.text)
 <LI><a href="#[7b]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7b]">mbed::Stream::flen()</a> from Stream.o(i._ZN4mbed6Stream4flenEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[78]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[78]">mbed::Stream::read(void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream4readEPvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[77]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[77]">mbed::Stream::close()</a> from Stream.o(i._ZN4mbed6Stream5closeEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7a]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7a]">mbed::Stream::lseek(long, int)</a> from Stream.o(i._ZN4mbed6Stream5lseekEli) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[76]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[76]">mbed::Stream::write(const void*, unsigned)</a> from Stream.o(i._ZN4mbed6Stream5writeEPKvj) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[79]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[79]">mbed::Stream::isatty()</a> from Stream.o(i._ZN4mbed6Stream6isattyEv) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7e]">mbed::Stream::~Stream__sub_object()</a> from Stream.o(i._ZN4mbed6StreamD2Ev) referenced from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[7f]">mbed::Ticker::handler()</a> from Ticker.o(i._ZN4mbed6Ticker7handlerEv) referenced from Ticker.o(.constdata__ZTVN4mbed6TickerE)
 <LI><a href="#[80]">mbed::FileBase::~FileBase()</a> from FileBase.o(i._ZN4mbed8FileBaseD1Ev) referenced from FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
 <LI><a href="#[81]">mbed::FileLike::~FileLike__sub_object()</a> from FileLike.o(i._ZN4mbed8FileLikeD2Ev) referenced from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[82]">mbed::CallChain::~CallChain()</a> from CallChain.o(i._ZN4mbed9CallChainD1Ev) referenced from CallChain.o(.constdata__ZTVN4mbed9CallChainE)
 <LI><a href="#[63]">nRF51Gap::disconnect(Gap::DisconnectionReason_t)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[5f]">nRF51Gap::getAddress(Gap::addr_type_e*, unsigned char*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[5e]">nRF51Gap::setAddress(Gap::addr_type_e, const unsigned char*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[6a]">nRF51Gap::getAppearance(unsigned short*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[68]">nRF51Gap::getDeviceName(unsigned char*, unsigned*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[69]">nRF51Gap::setAppearance(unsigned short)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[67]">nRF51Gap::setDeviceName(const unsigned char*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[62]">nRF51Gap::stopAdvertising()</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[61]">nRF51Gap::startAdvertising(const GapAdvertisingParams&)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[60]">nRF51Gap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[66]">nRF51Gap::updateConnectionParams(unsigned short, const Gap::ConnectionParams_t*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[64]">nRF51Gap::getPreferredConnectionParams(Gap::ConnectionParams_t*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[65]">nRF51Gap::setPreferredConnectionParams(const Gap::ConnectionParams_t*)</a> from nrf51gap.o(.text) referenced from nrf51gap.o(.constdata__ZTV8nRF51Gap)
 <LI><a href="#[4e]">nRF51Gap::~nRF51Gap()</a> from nrf51822n.o(i._ZN8nRF51GapD1Ev) referenced from nrf51822n.o(i._ZN8nRF51Gap11getInstanceEv)
 <LI><a href="#[38]">BLEDevice::~BLEDevice()</a> from main.o(i._ZN9BLEDeviceD1Ev) referenced from main.o(.text)
 <LI><a href="#[6b]">nRF51822n::getVersion()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[71]">nRF51822n::setTxPower(signed char)</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[72]">nRF51822n::waitForEvent()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[6d]">nRF51822n::getGattServer()</a> from nrf51822n.o(i._ZN9nRF51822n13getGattServerEv) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[6e]">nRF51822n::init()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[70]">nRF51822n::reset()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[6c]">nRF51822n::getGap()</a> from nrf51822n.o(i._ZN9nRF51822n6getGapEv) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[6f]">nRF51822n::shutdown()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[73]">nRF51822n::~nRF51822n__deallocating()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[3a]">nRF51822n::~nRF51822n()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.constdata__ZTV9nRF51822n)
 <LI><a href="#[3a]">nRF51822n::~nRF51822n()</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.text)
 <LI><a href="#[7d]">thunk{-72} to mbed::Serial::_getc()</a> from Serial.o(i._ZThn72_N4mbed6Serial5_getcEv) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[7c]">thunk{-72} to mbed::Serial::_putc(int)</a> from Serial.o(i._ZThn72_N4mbed6Serial5_putcEi) referenced from Serial.o(.constdata__ZTVN4mbed6SerialE)
 <LI><a href="#[54]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 4 times from nrf51822n.o(.constdata__ZTV10GattServer)
 <LI><a href="#[54]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 8 times from nrf51822n.o(.constdata__ZTV21BLEDeviceInstanceBase)
 <LI><a href="#[54]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 13 times from nrf51822n.o(.constdata__ZTV3Gap)
 <LI><a href="#[54]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from retarget.o(.constdata__ZTVN4mbed10FileHandleE)
 <LI><a href="#[54]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
 <LI><a href="#[54]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from Stream.o(.constdata__ZTVN4mbed6StreamE)
 <LI><a href="#[54]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 6 times from FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
 <LI><a href="#[85]">__main</a> from __main.o(!!!main) referenced from startup_nRF51822.o(.text)
 <LI><a href="#[84]">__sti___13_nRF51822n_cpp_ef81e865</a> from nrf51822n.o(.text) referenced from nrf51822n.o(.init_array)
 <LI><a href="#[83]">__sti___8_main_cpp_m_ble</a> from main.o(.text) referenced from main.o(.init_array)
 <LI><a href="#[4a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[52]">_printf_fp_dec_real</a> from _printf_fp_dec.o(.text) referenced from printf1.o(x$fpl$printf1)
 <LI><a href="#[45]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[44]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[47]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[43]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[42]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[41]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[46]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[48]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[50]">us_ticker_app_timer_callback</a> from us_ticker.o(i.us_ticker_app_timer_callback) referenced from us_ticker.o(i.us_ticker_set_interrupt)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[85]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[87]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[89]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1c0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1c2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[124]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[8a]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_n &rArr; _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[8b]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[8d]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[8f]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[91]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
</UL>

<P><STRONG><a name="[92]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
</UL>

<P><STRONG><a name="[93]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_ll &rArr; _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[95]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll
</UL>

<P><STRONG><a name="[96]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[98]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[99]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[9a]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[9c]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[9e]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[a0]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
</UL>

<P><STRONG><a name="[a1]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
</UL>

<P><STRONG><a name="[a2]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[a4]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_l &rArr; _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[a6]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_l
</UL>

<P><STRONG><a name="[a7]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[a9]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ab]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ad]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[bc]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[af]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1d3]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[1d4]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1d5]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[1d6]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1d7]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[88]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1da]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[bb]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1db]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[bd]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; $Super$$main &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[c0]"></a>__asm___13_nRF51822n_cpp_ef81e865___Z12nrf_delay_usj</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, nrf51822n.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nRF51822n_cpp_ef81e865___Z12nrf_delay_usj
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::reset()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nRF51822n_cpp_ef81e865___Z12nrf_delay_usj
</UL>

<P><STRONG><a name="[c1]"></a>__asm___11_app_timer_c_cd27f9c3__nrf_delay_us</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, app_timer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>

<P><STRONG><a name="[135]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[35]"></a>disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = disconnectionCallback(unsigned short, Gap::DisconnectionReason_t) &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::startAdvertising()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[1de]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[36]"></a>dataWrittenCallback(const GattCharacteristicWriteCBParams*)</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = dataWrittenCallback(const GattCharacteristicWriteCBParams*) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::getTXCharacteristicHandle()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[37]"></a>dataSentCallback(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[c6]"></a>sensor()</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = sensor() &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodicCallback()
</UL>

<P><STRONG><a name="[cb]"></a>sensor1()</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = sensor1() &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodicCallback()
</UL>

<P><STRONG><a name="[cc]"></a>sensor2()</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = sensor2() &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periodicCallback()
</UL>

<P><STRONG><a name="[cd]"></a>sensor3()</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[ce]"></a>sensor4()</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[34]"></a>periodicCallback()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = periodicCallback() &rArr; sensor2() &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor2()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor1()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[cf]"></a>error(ble_error_e, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = error(ble_error_e, unsigned) &rArr; mbed::DigitalOut::operator =(int) &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d1]"></a>$Super$$main</STRONG> (Thumb, 708 bytes, Stack size 344 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = $Super$$main &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::UARTService(BLEDevice&)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::init()
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::attach(void(*)())
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addFlags(unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(ble_error_e, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::startAdvertising()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::onDataWritten(void(*)(const GattCharacteristicWriteCBParams*))
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>BLEDevice::init()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bledevice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BLEDevice::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[e1]"></a>GapAdvertisingData::GapAdvertisingData()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GapAdvertisingData::GapAdvertisingData()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
</UL>

<P><STRONG><a name="[1df]"></a>GapAdvertisingData::GapAdvertisingData__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gapadvertisingdata.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>GapAdvertisingData::~GapAdvertisingData()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData__deallocating()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::~BLEDevice()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
</UL>
<P><STRONG><a name="[1e0]"></a>GapAdvertisingData::~GapAdvertisingData__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>GapAdvertisingData::~GapAdvertisingData__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GapAdvertisingData::~GapAdvertisingData__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingdata.o(.constdata__ZTV18GapAdvertisingData)
</UL>
<P><STRONG><a name="[e9]"></a>GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addFlags(unsigned char)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addTxPower(signed char)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addAppearance(GapAdvertisingData::Appearance)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[ec]"></a>GapAdvertisingData::addAppearance(GapAdvertisingData::Appearance)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[db]"></a>GapAdvertisingData::addFlags(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GapAdvertisingData::addFlags(unsigned char) &rArr; GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[ed]"></a>GapAdvertisingData::addTxPower(signed char)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingdata.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[e2]"></a>GapAdvertisingData::clear()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GapAdvertisingData::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
</UL>

<P><STRONG><a name="[f7]"></a>GapAdvertisingData::getPayload() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[f6]"></a>GapAdvertisingData::getPayloadLen() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[f8]"></a>GapAdvertisingData::getAppearance() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gapadvertisingdata.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>

<P><STRONG><a name="[e0]"></a>GapAdvertisingParams::GapAdvertisingParams(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, gapadvertisingparams.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GapAdvertisingParams::GapAdvertisingParams(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
</UL>

<P><STRONG><a name="[1e1]"></a>GapAdvertisingParams::GapAdvertisingParams__sub_object(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, gapadvertisingparams.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>GapAdvertisingParams::~GapAdvertisingParams()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gapadvertisingparams.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams__deallocating()
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::~BLEDevice()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
</UL>
<P><STRONG><a name="[1e2]"></a>GapAdvertisingParams::~GapAdvertisingParams__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gapadvertisingparams.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>GapAdvertisingParams::~GapAdvertisingParams__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, gapadvertisingparams.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GapAdvertisingParams::~GapAdvertisingParams__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gapadvertisingparams.o(.constdata__ZTV20GapAdvertisingParams)
</UL>
<P><STRONG><a name="[ee]"></a>GattService::GattService(const UUID&, GattCharacteristic**, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, gattservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GattService::GattService(const UUID&, GattCharacteristic**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::UARTService(BLEDevice&)
</UL>

<P><STRONG><a name="[1e3]"></a>GattService::GattService__sub_object(const UUID&, GattCharacteristic**, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, gattservice.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>UUID::UUID(const unsigned char*)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uuid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UUID::UUID(const unsigned char*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::UARTService(BLEDevice&)
</UL>

<P><STRONG><a name="[1e4]"></a>UUID::UUID__sub_object(const unsigned char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uuid.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>UUID::UUID(unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, uuid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1e5]"></a>UUID::UUID__sub_object(unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uuid.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>createBLEDeviceInstance()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf51822n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
</UL>

<P><STRONG><a name="[f5]"></a>nRF51822n::nRF51822n()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf51822n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_nRF51822n_cpp_ef81e865
</UL>

<P><STRONG><a name="[1e6]"></a>nRF51822n::nRF51822n__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nrf51822n.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>nRF51822n::~nRF51822n()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, nrf51822n.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::~nRF51822n__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
<LI> nrf51822n.o(.text)
</UL>
<P><STRONG><a name="[1e7]"></a>nRF51822n::~nRF51822n__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, nrf51822n.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>nRF51822n::~nRF51822n__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = nRF51822n::~nRF51822n__deallocating() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::~nRF51822n()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[6b]"></a>nRF51822n::getVersion()</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = nRF51822n::getVersion() &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[71]"></a>nRF51822n::setTxPower(signed char)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF51822n::setTxPower(signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[6e]"></a>nRF51822n::init()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nRF51822n::init() &rArr; btle_init &rArr; softdevice_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[6f]"></a>nRF51822n::shutdown()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF51822n::shutdown() &rArr; softdevice_handler_sd_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_sd_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[70]"></a>nRF51822n::reset()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nRF51822n::reset()
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___13_nRF51822n_cpp_ef81e865___Z12nrf_delay_usj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[72]"></a>nRF51822n::waitForEvent()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nRF51822n::waitForEvent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[5e]"></a>nRF51Gap::setAddress(Gap::addr_type_e, const unsigned char*)</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nRF51Gap::setAddress(Gap::addr_type_e, const unsigned char*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[5f]"></a>nRF51Gap::getAddress(Gap::addr_type_e*, unsigned char*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nRF51Gap::getAddress(Gap::addr_type_e*, unsigned char*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[60]"></a>nRF51Gap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF51Gap::setAdvertisingData(const GapAdvertisingData&, const GapAdvertisingData&)
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::getAppearance() const
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::getPayloadLen() const
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::getPayload() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[61]"></a>nRF51Gap::startAdvertising(const GapAdvertisingParams&)</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = nRF51Gap::startAdvertising(const GapAdvertisingParams&)
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::getInterval() const
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::getAdvertisingType() const
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[62]"></a>nRF51Gap::stopAdvertising()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nRF51Gap::stopAdvertising()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[63]"></a>nRF51Gap::disconnect(Gap::DisconnectionReason_t)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF51Gap::disconnect(Gap::DisconnectionReason_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[67]"></a>nRF51Gap::setDeviceName(const unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = nRF51Gap::setDeviceName(const unsigned char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[68]"></a>nRF51Gap::getDeviceName(unsigned char*, unsigned*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF51Gap::getDeviceName(unsigned char*, unsigned*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[69]"></a>nRF51Gap::setAppearance(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF51Gap::setAppearance(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[6a]"></a>nRF51Gap::getAppearance(unsigned short*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nRF51Gap::getAppearance(unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[108]"></a>nRF51Gap::setConnectionHandle(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf51gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
</UL>

<P><STRONG><a name="[102]"></a>nRF51Gap::getConnectionHandle()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf51gap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[64]"></a>nRF51Gap::getPreferredConnectionParams(Gap::ConnectionParams_t*)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF51Gap::getPreferredConnectionParams(Gap::ConnectionParams_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[65]"></a>nRF51Gap::setPreferredConnectionParams(const Gap::ConnectionParams_t*)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF51Gap::setPreferredConnectionParams(const Gap::ConnectionParams_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[66]"></a>nRF51Gap::updateConnectionParams(unsigned short, const Gap::ConnectionParams_t*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, nrf51gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF51Gap::updateConnectionParams(unsigned short, const Gap::ConnectionParams_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gap.o(.constdata__ZTV8nRF51Gap)
</UL>
<P><STRONG><a name="[55]"></a>nRF51GattServer::addService(GattService&)</STRONG> (Thumb, 458 bytes, Stack size 80 bytes, nrf51gattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = nRF51GattServer::addService(GattService&) &rArr; custom_add_in_characteristic
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::getProperties() const
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattAttribute::setHandle(unsigned short)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_convert_to_nordic_uuid
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_add_in_descriptor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_add_in_characteristic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
</UL>
<P><STRONG><a name="[56]"></a>nRF51GattServer::readValue(unsigned short, unsigned char*, unsigned short*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, nrf51gattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = nRF51GattServer::readValue(unsigned short, unsigned char*, unsigned short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
</UL>
<P><STRONG><a name="[57]"></a>nRF51GattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, nrf51gattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = nRF51GattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool) &rArr; nRF51Gap::getInstance() &rArr; mbed::CallChain::CallChain(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getConnectionHandle()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getInstance()
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::getProperties() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
</UL>
<P><STRONG><a name="[58]"></a>nRF51GattServer::initializeGATTDatabase()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf51gattserver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> nrf51gattserver.o(.constdata__ZTV15nRF51GattServer)
</UL>
<P><STRONG><a name="[103]"></a>nRF51GattServer::hwCallback(ble_evt_t*)</STRONG> (Thumb, 628 bytes, Stack size 72 bytes, nrf51gattserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = nRF51GattServer::hwCallback(ble_evt_t*) &rArr; FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*) &rArr;  FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*)
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::getProperties() const
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattServer::handleEvent(GattServerEvents::gattEvent_e, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
</UL>

<P><STRONG><a name="[10d]"></a>app_error_handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, btle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>

<P><STRONG><a name="[f3]"></a>btle_init</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, btle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = btle_init &rArr; softdevice_handler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_sys_evt_handler_set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_handler_init
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_ble_evt_handler_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_gap_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::init()
</UL>

<P><STRONG><a name="[115]"></a>assert_nrf_callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, btle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softdevice_assertion_handler(unsigned, unsigned short, const unsigned char*)
</UL>

<P><STRONG><a name="[110]"></a>btle_gap_init()</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, btle_gap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = btle_gap_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[114]"></a>custom_add_uuid_base</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, custom_helper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = custom_add_uuid_base
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_convert_to_nordic_uuid
</UL>

<P><STRONG><a name="[fc]"></a>custom_convert_to_nordic_uuid</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, custom_helper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = custom_convert_to_nordic_uuid &rArr; addToConvertedUUIDTable(const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToConvertedUUIDTable(const unsigned char*, unsigned char)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupConvertedUUIDTable(const unsigned char*, unsigned char*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_add_uuid_base
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[1e8]"></a>custom_decode_uuid_base(const unsigned char*, ble_uuid_t*)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, custom_helper.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>custom_add_in_characteristic</STRONG> (Thumb, 422 bytes, Stack size 104 bytes, custom_helper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = custom_add_in_characteristic
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[100]"></a>custom_add_in_descriptor</STRONG> (Thumb, 170 bytes, Stack size 64 bytes, custom_helper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = custom_add_in_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[3e]"></a>softdevice_assertion_handler(unsigned, unsigned short, const unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, softdevice_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = softdevice_assertion_handler(unsigned, unsigned short, const unsigned char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_nrf_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> softdevice_handler.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>intern_softdevice_events_execute</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, softdevice_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = intern_softdevice_events_execute &rArr; app_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI2_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>softdevice_handler_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, softdevice_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softdevice_handler_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[f4]"></a>softdevice_handler_sd_disable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, softdevice_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softdevice_handler_sd_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::shutdown()
</UL>

<P><STRONG><a name="[10e]"></a>softdevice_ble_evt_handler_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, softdevice_handler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[10f]"></a>softdevice_sys_evt_handler_set</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, softdevice_handler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_init
</UL>

<P><STRONG><a name="[30]"></a>SWI2_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, softdevice_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SWI2_IRQHandler &rArr; intern_softdevice_events_execute &rArr; app_error_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_error_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;intern_softdevice_events_execute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Reset_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CCM_AAR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ECB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>GPIOTE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>LPCOMP_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>POWER_CLOCK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>QDEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>RADIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>RTC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI0_TWI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI1_TWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>SWI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SWI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SWI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SWI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TEMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nRF51822.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>malloc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor4()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor3()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor2()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor1()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[ca]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor4()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor3()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor2()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor1()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>

<P><STRONG><a name="[1bc]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[1e9]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>

<P><STRONG><a name="[1ea]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__c89vfprintf</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, c89vfprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vfprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
</UL>

<P><STRONG><a name="[11b]"></a>__2sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[c5]"></a>__2snprintf</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataWrittenCallback(const GattCharacteristicWriteCBParams*)
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::getVersion()
</UL>

<P><STRONG><a name="[97]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[121]"></a>_printf_longlong_hex</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9d]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[a5]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[8e]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[122]"></a>__printf</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[125]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[127]"></a>_scanf_int</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[129]"></a>_do_fflush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
</UL>

<P><STRONG><a name="[12c]"></a>fflush</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fflush.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::printf(const char*, ...)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[12d]"></a>freopen</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[130]"></a>fopen</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[131]"></a>setbuf</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setbuf &rArr; setvbuf
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[12e]"></a>_fclose_internal</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[198]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fclose
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_atexit</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::getGattServer()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getInstance()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_nRF51822n_cpp_ef81e865
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
</UL>

<P><STRONG><a name="[112]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lookupConvertedUUIDTable(const unsigned char*, unsigned char*)
</UL>

<P><STRONG><a name="[fb]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::setDeviceName(const unsigned char*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[19b]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::onDataWritten(const GattCharacteristicWriteCBParams*)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(const unsigned char*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::GattService(const UUID&, GattCharacteristic**, unsigned)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getAddress(Gap::addr_type_e*, unsigned char*)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::setAddress(Gap::addr_type_e, const unsigned char*)
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::membercaller&lang;UARTService&rang;(void*, char*, const GattCharacteristicWriteCBParams*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addToConvertedUUIDTable(const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[1eb]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>memset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::CallChain(int)
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[138]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[137]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(const unsigned char*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::nRF51GattServer()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(unsigned short)
</UL>

<P><STRONG><a name="[13a]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[e7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::UARTService(BLEDevice&)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::GapAdvertisingData()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::clear()
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::startAdvertising(const GapAdvertisingParams&)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::nRF51GattServer()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_add_in_descriptor
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_add_in_characteristic
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[f2]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::getVersion()
</UL>

<P><STRONG><a name="[1a7]"></a>strcmp</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, strcmpv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ed]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_gap_init()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[86]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_f2ulz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[1ef]"></a>_ll_ufrom_f</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ffixul.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1a6]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[134]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1f0]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[c]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[13d]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[b0]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_expand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_escrow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[140]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[143]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[11d]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11e]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[141]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[120]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[8c]"></a>_printf_charcount</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[11c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[41]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[11a]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>

<P><STRONG><a name="[145]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[9f]"></a>_printf_longlong_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[148]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[9b]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[a3]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[128]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[126]"></a>__vfscanf_char</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[43]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[144]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[14a]"></a>_readbuf</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[151]"></a>_seteof</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[14d]"></a>__filbuf</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_flushlinebuffered
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seteof
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[1ae]"></a>__filbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[1f2]"></a>__filbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, filbuf.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>__flsbuf</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[1af]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1f3]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>_fseek</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[1f4]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>setvbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[14c]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[155]"></a>_writebuf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[12a]"></a>_fflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[14e]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[158]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>

<P><STRONG><a name="[159]"></a>__rt_SIGPVFN</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[11f]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[4f]"></a>__default_new_handler()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, arm_newhandler_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __default_new_handler() &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[13c]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[147]"></a>_ll_udiv10</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[48]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1f5]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf1.o(x$fpl$printf1)
</UL>
<P><STRONG><a name="[165]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[a8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[aa]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[167]"></a>_printf_lcs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ac]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ae]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[149]"></a>__vfscanf</STRONG> (Thumb, 880 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[156]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1f6]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>_initio</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[16b]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[150]"></a>_flushlinebuffered</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, flushlinebuffered.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[146]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[15b]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[13e]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[15a]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[13f]"></a>__rt_heap_escrow</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, heapauxa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[13b]"></a>__rt_heap_expand</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, heapauxa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_heap_expand
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[15c]"></a>std::terminate()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_new_handler()
</UL>

<P><STRONG><a name="[16f]"></a>__cxa_get_globals</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[16c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[15d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[b2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[171]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[169]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1f7]"></a>__errno</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>_printf_fp_infnan</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[15f]"></a>_btod_etento</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[160]"></a>_btod_d2e</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _btod_d2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[162]"></a>_btod_emul</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[176]"></a>_btod_emuld</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[161]"></a>_btod_ediv</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _btod_ediv &rArr; btod_internal_div
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[178]"></a>_btod_edivd</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, btod.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_div
</UL>

<P><STRONG><a name="[170]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[16e]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
</UL>

<P><STRONG><a name="[16a]"></a>__rt_SIGRTRED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[16d]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[172]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1f9]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1fb]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[1fd]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[17d]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1fe]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1ff]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>main</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, retarget.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = main &rArr; $Super$$main &rArr; mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2b]"></a>RTC1_IRQHandler</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, app_timer.o(i.RTC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SWI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, app_timer.o(i.SWI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SWI0_IRQHandler &rArr; timer_list_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SystemInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, system_nrf51822.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>UART0_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, serial_api.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_nRF51822.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>GattServer::handleEvent(GattServerEvents::gattEvent_e, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, nrf51gattserver.o(i._ZN10GattServer11handleEventEN16GattServerEvents11gattEvent_eEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GattServer::handleEvent(GattServerEvents::gattEvent_e, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::hwCallback(ble_evt_t*)
</UL>

<P><STRONG><a name="[53]"></a>UARTService::onDataWritten(const GattCharacteristicWriteCBParams*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(i._ZN11UARTService13onDataWrittenEPK31GattCharacteristicWriteCBParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UARTService::onDataWritten(const GattCharacteristicWriteCBParams*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::getTXCharacteristicHandle()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>UARTService::getTXCharacteristicHandle()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(i._ZN11UARTService25getTXCharacteristicHandleEv))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::onDataWritten(const GattCharacteristicWriteCBParams*)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataWrittenCallback(const GattCharacteristicWriteCBParams*)
</UL>

<P><STRONG><a name="[de]"></a>UARTService::UARTService(BLEDevice&)</STRONG> (Thumb, 238 bytes, Stack size 128 bytes, main.o(i._ZN11UARTServiceC1ER9BLEDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = UARTService::UARTService(BLEDevice&) &rArr; FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;UARTService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*)) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UUID::UUID(const unsigned char*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattService::GattService(const UUID&, GattCharacteristic**, unsigned)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;UARTService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*))
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[200]"></a>UARTService::UARTService__sub_object(BLEDevice&)</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, main.o(i._ZN11UARTServiceC1ER9BLEDevice), UNUSED)

<P><STRONG><a name="[ff]"></a>GattAttribute::setHandle(unsigned short)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, nrf51gattserver.o(i._ZN13GattAttribute9setHandleEt))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[10b]"></a>nRF51GattServer::nRF51GattServer()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, nrf51822n.o(i._ZN15nRF51GattServerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nRF51GattServer::nRF51GattServer()
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::getGattServer()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
</UL>

<P><STRONG><a name="[201]"></a>nRF51GattServer::nRF51GattServer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, nrf51822n.o(i._ZN15nRF51GattServerC1Ev), UNUSED)

<P><STRONG><a name="[3b]"></a>nRF51GattServer::~nRF51GattServer()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf51822n.o(i._ZN15nRF51GattServerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nRF51GattServer::~nRF51GattServer() &rArr; CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> nrf51822n.o(i._ZN9nRF51822n13getGattServerEv)
<LI> btle.o(.text)
</UL>
<P><STRONG><a name="[202]"></a>nRF51GattServer::~nRF51GattServer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nrf51822n.o(i._ZN15nRF51GattServerD1Ev), UNUSED)

<P><STRONG><a name="[181]"></a>GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, main.o(i._ZN18GattCharacteristicC1ERK4UUIDPhtthPP13GattAttributej))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GattCharacteristic::GattCharacteristic(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::UARTService(BLEDevice&)
</UL>

<P><STRONG><a name="[203]"></a>GattCharacteristic::GattCharacteristic__sub_object(const UUID&, unsigned char*, unsigned short, unsigned short, unsigned char, GattAttribute**, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, main.o(i._ZN18GattCharacteristicC1ERK4UUIDPhtthPP13GattAttributej), UNUSED)

<P><STRONG><a name="[e5]"></a>mbed::DigitalOut::DigitalOut(PinName)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::DigitalOut::DigitalOut(PinName) &rArr; gpio_init_out &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
</UL>

<P><STRONG><a name="[204]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, main.o(i._ZN4mbed10DigitalOutC1E7PinName), UNUSED)

<P><STRONG><a name="[d0]"></a>mbed::DigitalOut::operator =(int)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, main.o(i._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::DigitalOut::operator =(int) &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error(ble_error_e, unsigned)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[74]"></a>mbed::FileHandle::flen()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, retarget.o(i._ZN4mbed10FileHandle4flenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FileHandle::flen()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[205]"></a>mbed::FileHandle::~FileHandle()</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev), UNUSED)

<P><STRONG><a name="[75]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, retarget.o(i._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[185]"></a>mbed::SerialBase::_base_getc()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-72} to mbed::Serial::_getc()
</UL>

<P><STRONG><a name="[187]"></a>mbed::SerialBase::_base_putc(int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase10_base_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thunk{-72} to mbed::Serial::_putc(int)
</UL>

<P><STRONG><a name="[4c]"></a>mbed::SerialBase::_irq_handler(unsigned, SerialIrq)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase12_irq_handlerEj9SerialIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[d4]"></a>mbed::SerialBase::baud(int)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBase4baudEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::SerialBase::baud(int) &rArr; serial_baud
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c8]"></a>mbed::SerialBase::readable()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i._ZN4mbed10SerialBase8readableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::SerialBase::readable()
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor4()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor3()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor2()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor1()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor()
</UL>

<P><STRONG><a name="[18c]"></a>mbed::SerialBase::SerialBase(PinName, PinName)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = mbed::SerialBase::SerialBase(PinName, PinName) &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_irq_handler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[206]"></a>mbed::SerialBase::SerialBase__sub_object(PinName, PinName)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_), UNUSED)

<P><STRONG><a name="[4d]"></a>mbed::TimerEvent::irq(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent3irqEj))
<BR>[Address Reference Count : 1]<UL><LI> TimerEvent.o(i._ZN4mbed10TimerEventC2Ev)
</UL>
<P><STRONG><a name="[190]"></a>mbed::TimerEvent::insert(unsigned long long)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6insertEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[192]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbed::TimerEvent::remove() &rArr; us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
</UL>

<P><STRONG><a name="[d2]"></a>mbed::TimerEvent::TimerEvent__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, TimerEvent.o(i._ZN4mbed10TimerEventC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object() &rArr; us_ticker_set_handler &rArr; us_ticker_init &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[189]"></a>mbed::FunctionPointer::call()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer4callEv))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::call()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_irq_handler(unsigned, SerialIrq)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::handler()
</UL>

<P><STRONG><a name="[d7]"></a>mbed::FunctionPointer::attach(void(*)())</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointer6attachEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[d3]"></a>mbed::FunctionPointer::FunctionPointer(void(*)())</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func1&rang;
</UL>

<P><STRONG><a name="[207]"></a>mbed::FunctionPointer::FunctionPointer__sub_object(void(*)())</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FunctionPointer.o(i._ZN4mbed15FunctionPointerC1EPFvvE), UNUSED)

<P><STRONG><a name="[e4]"></a>mbed::Serial::Serial(PinName, PinName, const char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
</UL>

<P><STRONG><a name="[208]"></a>mbed::Serial::Serial__sub_object(PinName, PinName, const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialC1E7PinNameS1_PKc), UNUSED)

<P><STRONG><a name="[39]"></a>mbed::Serial::~Serial()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::Serial::~Serial() &rArr; mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text)
<LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[209]"></a>mbed::Serial::~Serial__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Serial.o(i._ZN4mbed6SerialD1Ev), UNUSED)

<P><STRONG><a name="[7b]"></a>mbed::Stream::flen()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream4flenEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c9]"></a>mbed::Stream::getc()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6Stream4getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mbed::Stream::getc() &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor4()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor3()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor2()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor1()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor()
</UL>

<P><STRONG><a name="[78]"></a>mbed::Stream::read(void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[77]"></a>mbed::Stream::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5closeEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[7a]"></a>mbed::Stream::lseek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream5lseekEli))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[76]"></a>mbed::Stream::write(const void*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6Stream5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Stream::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[79]"></a>mbed::Stream::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, Stream.o(i._ZN4mbed6Stream6isattyEv))
<BR>[Address Reference Count : 2]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[c2]"></a>mbed::Stream::printf(const char*, ...)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, Stream.o(i._ZN4mbed6Stream6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::printf(const char*, ...) &rArr; fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor2()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor1()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor()
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[195]"></a>mbed::Stream::Stream__sub_object(const char*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, Stream.o(i._ZN4mbed6StreamC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setbuf
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
</UL>

<P><STRONG><a name="[20a]"></a>mbed::Stream::~Stream()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev), UNUSED)

<P><STRONG><a name="[7e]"></a>mbed::Stream::~Stream__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, Stream.o(i._ZN4mbed6StreamD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mbed::Stream::~Stream__sub_object() &rArr; fclose
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fclose
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::~Serial()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
</UL>
<P><STRONG><a name="[d8]"></a>mbed::Ticker::setup(unsigned long long)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, Ticker.o(i._ZN4mbed6Ticker5setupEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed::Ticker::setup(unsigned long long) &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7f]"></a>mbed::Ticker::handler()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, Ticker.o(i._ZN4mbed6Ticker7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mbed::Ticker::handler() &rArr; mbed::TimerEvent::insert(unsigned long long) &rArr; us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Ticker.o(.constdata__ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[19e]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[19a]"></a>mbed::FileBase::lookup(const char*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, FileBase.o(i._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
</UL>

<P><STRONG><a name="[19c]"></a>mbed::FileBase::FileBase(const char*, mbed::PathType)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::FileLike__sub_object(const char*)
</UL>

<P><STRONG><a name="[20b]"></a>mbed::FileBase::FileBase__sub_object(const char*, mbed::PathType)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseC1EPKcNS_8PathTypeE), UNUSED)

<P><STRONG><a name="[80]"></a>mbed::FileBase::~FileBase()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileLike::~FileLike__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileBase.o(.constdata__ZTVN4mbed8FileBaseE)
</UL>
<P><STRONG><a name="[20c]"></a>mbed::FileBase::~FileBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, FileBase.o(i._ZN4mbed8FileBaseD1Ev), UNUSED)

<P><STRONG><a name="[197]"></a>mbed::FileLike::FileLike__sub_object(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileLike::FileLike__sub_object(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::FileBase(const char*, mbed::PathType)
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::Stream__sub_object(const char*)
</UL>

<P><STRONG><a name="[20d]"></a>mbed::FileLike::~FileLike()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev), UNUSED)

<P><STRONG><a name="[81]"></a>mbed::FileLike::~FileLike__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, FileLike.o(i._ZN4mbed8FileLikeD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mbed::FileLike::~FileLike__sub_object() &rArr; mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::~FileBase()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::~Stream__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[19d]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::fileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[19f]"></a>mbed::FilePath::file()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::file()
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1a8]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1a0]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1a9]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, FilePath.o(i._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[1a1]"></a>mbed::FilePath::FilePath(const char*)</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mbed::FilePath::FilePath(const char*) &rArr; mbed::FileBase::lookup(const char*, unsigned) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[20e]"></a>mbed::FilePath::FilePath__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, FilePath.o(i._ZN4mbed8FilePathC1EPKc), UNUSED)

<P><STRONG><a name="[109]"></a>mbed::CallChain::call()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, CallChain.o(i._ZN4mbed9CallChain4callEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::CallChain::call()
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::call()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
</UL>

<P><STRONG><a name="[1a2]"></a>mbed::CallChain::CallChain(int)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, CallChain.o(i._ZN4mbed9CallChainC1Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbed::CallChain::CallChain(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getInstance()
</UL>

<P><STRONG><a name="[20f]"></a>mbed::CallChain::CallChain__sub_object(int)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, CallChain.o(i._ZN4mbed9CallChainC1Ei), UNUSED)

<P><STRONG><a name="[82]"></a>mbed::CallChain::~CallChain()</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, CallChain.o(i._ZN4mbed9CallChainD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::CallChain::~CallChain() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::~nRF51Gap()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> CallChain.o(.constdata__ZTVN4mbed9CallChainE)
</UL>
<P><STRONG><a name="[210]"></a>mbed::CallChain::~CallChain__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, CallChain.o(i._ZN4mbed9CallChainD1Ev), UNUSED)

<P><STRONG><a name="[101]"></a>nRF51Gap::getInstance()</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, nrf51822n.o(i._ZN8nRF51Gap11getInstanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = nRF51Gap::getInstance() &rArr; mbed::CallChain::CallChain(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::CallChain(int)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::getGap()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
</UL>

<P><STRONG><a name="[4e]"></a>nRF51Gap::~nRF51Gap()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nrf51822n.o(i._ZN8nRF51GapD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nRF51Gap::~nRF51Gap() &rArr; mbed::CallChain::~CallChain() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::~CallChain()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(i._ZN8nRF51Gap11getInstanceEv)
</UL>
<P><STRONG><a name="[211]"></a>nRF51Gap::~nRF51Gap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nrf51822n.o(i._ZN8nRF51GapD1Ev), UNUSED)

<P><STRONG><a name="[da]"></a>BLEDevice::onDataWritten(void(*)(const GattCharacteristicWriteCBParams*))</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, main.o(i._ZN9BLEDevice13onDataWrittenEPFvPK31GattCharacteristicWriteCBParamsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BLEDevice::onDataWritten(void(*)(const GattCharacteristicWriteCBParams*)) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::common_add(FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c3]"></a>BLEDevice::startAdvertising()</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, main.o(i._ZN9BLEDevice16startAdvertisingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BLEDevice::startAdvertising()
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnectionCallback(unsigned short, Gap::DisconnectionReason_t)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[dc]"></a>BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, main.o(i._ZN9BLEDevice28accumulateAdvertisingPayloadEN18GapAdvertisingData8DataTypeEPKhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BLEDevice::accumulateAdvertisingPayload(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::addData(GapAdvertisingData::DataType, const unsigned char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[38]"></a>BLEDevice::~BLEDevice()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i._ZN9BLEDeviceD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BLEDevice::~BLEDevice()
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[212]"></a>BLEDevice::~BLEDevice__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, main.o(i._ZN9BLEDeviceD1Ev), UNUSED)

<P><STRONG><a name="[6d]"></a>nRF51822n::getGattServer()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, nrf51822n.o(i._ZN9nRF51822n13getGattServerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = nRF51822n::getGattServer() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::nRF51GattServer()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[6c]"></a>nRF51822n::getGap()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, nrf51822n.o(i._ZN9nRF51822n6getGapEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = nRF51822n::getGap() &rArr; nRF51Gap::getInstance() &rArr; mbed::CallChain::CallChain(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getInstance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV9nRF51822n)
</UL>
<P><STRONG><a name="[fd]"></a>GattCharacteristic::getProperties() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, nrf51gattserver.o(i._ZNK18GattCharacteristic13getPropertiesEv))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::hwCallback(ble_evt_t*)
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::updateValue(unsigned short, unsigned char*, unsigned short, bool)
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::addService(GattService&)
</UL>

<P><STRONG><a name="[fa]"></a>GapAdvertisingParams::getInterval() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf51gap.o(i._ZNK20GapAdvertisingParams11getIntervalEv))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::startAdvertising(const GapAdvertisingParams&)
</UL>

<P><STRONG><a name="[f9]"></a>GapAdvertisingParams::getAdvertisingType() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nrf51gap.o(i._ZNK20GapAdvertisingParams18getAdvertisingTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::startAdvertising(const GapAdvertisingParams&)
</UL>

<P><STRONG><a name="[7d]"></a>thunk{-72} to mbed::Serial::_getc()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Serial.o(i._ZThn72_N4mbed6Serial5_getcEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thunk{-72} to mbed::Serial::_getc() &rArr; mbed::SerialBase::_base_getc()
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[7c]"></a>thunk{-72} to mbed::Serial::_putc(int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, Serial.o(i._ZThn72_N4mbed6Serial5_putcEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = thunk{-72} to mbed::Serial::_putc(int) &rArr; mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> Serial.o(.constdata__ZTVN4mbed6SerialE)
</UL>
<P><STRONG><a name="[e8]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::~CallChain()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::~nRF51822n__deallocating()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::~GapAdvertisingParams__deallocating()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::~GapAdvertisingData__deallocating()
</UL>

<P><STRONG><a name="[1a3]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::CallChain(int)
</UL>

<P><STRONG><a name="[1a4]"></a>operator new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;UARTService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*))
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::onDataWritten(void(*)(const GattCharacteristicWriteCBParams*))
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[175]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, btod.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btod_internal_mul
</UL>

<P><STRONG><a name="[163]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[18d]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[10a]"></a>__cxa_guard_acquire</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::getGattServer()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getInstance()
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btle_handler(ble_evt_t*)
</UL>

<P><STRONG><a name="[54]"></a>__cxa_pure_virtual</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 7]<UL><LI> nrf51822n.o(.constdata__ZTV3Gap)
<LI> nrf51822n.o(.constdata__ZTV10GattServer)
<LI> nrf51822n.o(.constdata__ZTV21BLEDeviceInstanceBase)
<LI> retarget.o(.constdata__ZTVN4mbed10FileHandleE)
<LI> Stream.o(.constdata__ZTVN4mbed6StreamE)
<LI> TimerEvent.o(.constdata__ZTVN4mbed10TimerEventE)
<LI> FileLike.o(.constdata__ZTVN4mbed8FileLikeE)
</UL>
<P><STRONG><a name="[ba]"></a>__user_setup_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys.o(i.__user_setup_stackheap))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[123]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[133]"></a>_sys_close</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, retarget.o(i._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[153]"></a>_sys_flen</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[154]"></a>_sys_istty</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, retarget.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[12f]"></a>_sys_open</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, retarget.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = _sys_open &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(const char*)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[14b]"></a>_sys_read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, retarget.o(i._sys_read), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_readbuf
</UL>

<P><STRONG><a name="[14f]"></a>_sys_seek</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, retarget.o(i._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf
</UL>

<P><STRONG><a name="[157]"></a>_sys_write</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, retarget.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[e6]"></a>analogin_init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, analogin_api.o(i.analogin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = analogin_init &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_main_cpp_m_ble
</UL>

<P><STRONG><a name="[1bb]"></a>app_timer_cnt_get</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, app_timer.o(i.app_timer_cnt_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = app_timer_cnt_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[1bd]"></a>app_timer_create</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, app_timer.o(i.app_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = app_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>

<P><STRONG><a name="[1ab]"></a>app_timer_init</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, app_timer.o(i.app_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>

<P><STRONG><a name="[1bf]"></a>app_timer_start</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>

<P><STRONG><a name="[1b7]"></a>app_timer_stop</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, app_timer.o(i.app_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
</UL>

<P><STRONG><a name="[1ac]"></a>error</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, error.o(i.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[bf]"></a>exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, exit.o(i.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[196]"></a>fgetc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fgetc.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fgetc &rArr; __filbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__filbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Stream::getc()
</UL>

<P><STRONG><a name="[46]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[1b0]"></a>gpio_dir</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio_api.o(i.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = gpio_dir &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[1b1]"></a>gpio_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio_api.o(i.gpio_init))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[183]"></a>gpio_init_out</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gpio.o(i.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = gpio_init_out &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[1b2]"></a>gpio_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio_api.o(i.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = gpio_mode &rArr;  pin_mode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[184]"></a>mbed_assert_internal</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, assert.o(i.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator =(int)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[1ad]"></a>mbed_die</STRONG> (Thumb, 256 bytes, Stack size 96 bytes, board.o(i.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + In Cycle
<LI>Call Chain = mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[17f]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>mbed_sdk_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(i.mbed_sdk_init))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>pin_mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pinmap.o(i.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
</UL>

<P><STRONG><a name="[1aa]"></a>pinmap_peripheral</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pinmap_common.o(i.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = pinmap_peripheral &rArr; error &rArr; exit &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[18a]"></a>serial_baud</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, serial_api.o(i.serial_baud))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = serial_baud
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::baud(int)
</UL>

<P><STRONG><a name="[186]"></a>serial_getc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_api.o(i.serial_getc))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_getc()
</UL>

<P><STRONG><a name="[18e]"></a>serial_init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, serial_api.o(i.serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_read
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[18f]"></a>serial_irq_handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, serial_api.o(i.serial_irq_handler))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::SerialBase(PinName, PinName)
</UL>

<P><STRONG><a name="[188]"></a>serial_putc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, serial_api.o(i.serial_putc))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::_base_putc(int)
</UL>

<P><STRONG><a name="[18b]"></a>serial_readable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, serial_api.o(i.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::SerialBase::readable()
</UL>

<P><STRONG><a name="[1b6]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = us_ticker_clear_interrupt &rArr; app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[1b8]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = us_ticker_disable_interrupt &rArr; app_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
</UL>

<P><STRONG><a name="[1b9]"></a>us_ticker_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, us_ticker.o(i.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = us_ticker_init &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_handler
</UL>

<P><STRONG><a name="[191]"></a>us_ticker_insert_event</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, us_ticker_api.o(i.us_ticker_insert_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = us_ticker_insert_event &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert(unsigned long long)
</UL>

<P><STRONG><a name="[1b5]"></a>us_ticker_irq_handler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = us_ticker_irq_handler &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_clear_interrupt
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_app_timer_callback
</UL>

<P><STRONG><a name="[199]"></a>us_ticker_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, us_ticker.o(i.us_ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = us_ticker_read &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::setup(unsigned long long)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ms
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>

<P><STRONG><a name="[193]"></a>us_ticker_remove_event</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = us_ticker_remove_event &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_set_interrupt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_disable_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[194]"></a>us_ticker_set_handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, us_ticker_api.o(i.us_ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = us_ticker_set_handler &rArr; us_ticker_init &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object()
</UL>

<P><STRONG><a name="[1ba]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, us_ticker.o(i.us_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_cnt_get
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_start
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;app_timer_create
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_remove_event
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_insert_event
</UL>

<P><STRONG><a name="[1b4]"></a>wait_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wait_api.o(i.wait_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wait_ms &rArr; us_ticker_read &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[b5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[4a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf51gattserver.o(t._ZN26FunctionPointerWithContextIP34GattCharacteristicReadAuthCBParamsE4callES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*) &rArr;  FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*)
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;GattCharacteristicReadAuthCBParams*&rang;::call(GattCharacteristicReadAuthCBParams*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::hwCallback(ble_evt_t*)
</UL>

<P><STRONG><a name="[106]"></a>FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf51gattserver.o(t._ZN26FunctionPointerWithContextIP35GattCharacteristicWriteAuthCBParamsE4callES1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*) &rArr;  FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;GattCharacteristicWriteAuthCBParams*&rang;::call(GattCharacteristicWriteAuthCBParams*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::hwCallback(ble_evt_t*)
</UL>

<P><STRONG><a name="[51]"></a>void FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::membercaller&lang;UARTService&rang;(void*, char*, const GattCharacteristicWriteCBParams*)</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, main.o(t._ZN26FunctionPointerWithContextIPK31GattCharacteristicWriteCBParamsE12membercallerI11UARTServiceEEvPvPcS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = void FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::membercaller&lang;UARTService&rang;(void*, char*, const GattCharacteristicWriteCBParams*) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(t._ZN38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE3addI11UARTServiceEEP26FunctionPointerWithContextIS2_EPT_MS9_FvS2_E)
</UL>
<P><STRONG><a name="[105]"></a>FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, nrf51gattserver.o(t._ZN26FunctionPointerWithContextIPK31GattCharacteristicWriteCBParamsE4callES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*) &rArr;  FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::call(const GattCharacteristicWriteCBParams*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::hwCallback(ble_evt_t*)
</UL>

<P><STRONG><a name="[1a5]"></a>CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::common_add(FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(t._ZN38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE10common_addEP26FunctionPointerWithContextIS2_E))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;UARTService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*))
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDevice::onDataWritten(void(*)(const GattCharacteristicWriteCBParams*))
</UL>

<P><STRONG><a name="[182]"></a>FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;UARTService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*))</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, main.o(t._ZN38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE3addI11UARTServiceEEP26FunctionPointerWithContextIS2_EPT_MS9_FvS2_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;* CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::add&lang;UARTService&rang;(T1*, void(T1::*)(const GattCharacteristicWriteCBParams*)) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::common_add(FunctionPointerWithContext&lang;const GattCharacteristicWriteCBParams*&rang;*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTService::UARTService(BLEDevice&)
</UL>

<P><STRONG><a name="[5d]"></a>CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nrf51822n.o(t._ZN38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext() &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::~nRF51GattServer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.constdata__ZTV38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsE)
</UL>
<P><STRONG><a name="[213]"></a>CallChainOfFunctionPointersWithContext&lang;const GattCharacteristicWriteCBParams*&rang;::~CallChainOfFunctionPointersWithContext__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, nrf51822n.o(t._ZN38CallChainOfFunctionPointersWithContextIPK31GattCharacteristicWriteCBParamsED1Ev), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[214]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[90]"></a>_printf_fp_dec</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _printf_fp_dec
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[83]"></a>__sti___8_main_cpp_m_ble</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = __sti___8_main_cpp_m_ble &rArr; mbed::Serial::Serial(PinName, PinName, const char*) &rArr; mbed::Stream::Stream__sub_object(const char*) &rArr; fopen &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; serial_init &rArr; pin_mode &rArr; mbed_assert_internal &rArr; mbed_die &rArr;  mbed_assert_internal (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Serial::Serial(PinName, PinName, const char*)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingParams::GapAdvertisingParams(GapAdvertisingParams::AdvertisingType, unsigned short, unsigned short)
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::GapAdvertisingData()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapAdvertisingData::clear()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBLEDeviceInstance()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut(PinName)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[84]"></a>__sti___13_nRF51822n_cpp_ef81e865</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf51822n.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___13_nRF51822n_cpp_ef81e865 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51822n::nRF51822n()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nrf51822n.o(.init_array)
</UL>
<P><STRONG><a name="[3d]"></a>sys_evt_dispatch(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, btle.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> btle.o(.text)
</UL>
<P><STRONG><a name="[3c]"></a>btle_handler(ble_evt_t*)</STRONG> (Thumb, 428 bytes, Stack size 48 bytes, btle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = btle_handler(ble_evt_t*) &rArr; nRF51Gap::getInstance() &rArr; mbed::CallChain::CallChain(int) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getConnectionHandle()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::setConnectionHandle(unsigned short)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51Gap::getInstance()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::nRF51GattServer()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CallChain::call()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nRF51GattServer::hwCallback(ble_evt_t*)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> btle.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>lookupConvertedUUIDTable(const unsigned char*, unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, custom_helper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lookupConvertedUUIDTable(const unsigned char*, unsigned char*) &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_convert_to_nordic_uuid
</UL>

<P><STRONG><a name="[113]"></a>addToConvertedUUIDTable(const unsigned char*, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, custom_helper.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = addToConvertedUUIDTable(const unsigned char*, unsigned char) &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custom_convert_to_nordic_uuid
</UL>

<P><STRONG><a name="[180]"></a>timer_list_handler</STRONG> (Thumb, 1072 bytes, Stack size 48 bytes, app_timer.o(i.timer_list_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer_list_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___11_app_timer_c_cd27f9c3__nrf_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI0_IRQHandler
</UL>

<P><STRONG><a name="[4b]"></a>&lang;Func1&rang;</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, SerialBase.o(i.<Func1>))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = &lang;Func1&rang;
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FunctionPointer::FunctionPointer(void(*)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> SerialBase.o(i._ZN4mbed10SerialBaseC1E7PinNameS1_)
</UL>
<P><STRONG><a name="[50]"></a>us_ticker_app_timer_callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, us_ticker.o(i.us_ticker_app_timer_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = us_ticker_app_timer_callback &rArr; us_ticker_irq_handler &rArr; us_ticker_set_interrupt &rArr; app_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(i.us_ticker_set_interrupt)
</UL>
<P><STRONG><a name="[45]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[47]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[15e]"></a>_fp_digits</STRONG> (Thumb, 408 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[49]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>btod_internal_mul</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = btod_internal_mul &rArr; __ARM_common_ll_muluu
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[177]"></a>btod_internal_div</STRONG> (Thumb, 494 bytes, Stack size 64 bytes, btod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = btod_internal_div
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[17a]"></a>__rt_lib_shutdown</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[94]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[166]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[168]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
